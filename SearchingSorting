Ans 1 
package SearchingInArray;

public class CountBinary 
{
	public static void main(String[] args) 
	{
		int[] arr = {0,0,0,0,1,1};
		int n = arr.length;
		
		int low = 0;
		int high = n-1;
		
		int count = 0;
		
		while(low<=high)
		{
			int mid = low + (high-low)/2;
			
			if(arr[mid]==0)
			{
				low = low + 1;
			}
			else
			{
				high = mid-1;
			}
			count = n - low;
		}
		
		System.out.println(count);
	}

}

Ans 2 :-
package SearchingInArray;

public class DuplicateElemm 
{
	public static int firstOccur(int[] arr, int n, int target)
	{
		int low = 0;
		int high = n;
		int ind = -1;
		while(low<=high)
		{
			int mid = low + (high-low)/2;
			
			if(arr[mid] == target)
			{
				ind = mid;
				high = mid-1;
			}
			else if (arr[mid]> target)
			{
				high = mid-1;
			}
			else if (arr[mid]<target)
			{
				low = mid + 1;
			}
		}
		return ind;
	}
	
	
	public static int lastOccur(int[] arr, int n, int target)
	{
		int low = 0;
		int high = n;
		int ind = -1;
		while(low<=high)
		{
			int mid = low + (high-low)/2;
			
			if(arr[mid] == target)
			{
				ind = mid;
				low = mid+1;
			}
			else if (arr[mid]> target)
			{
				high = mid-1;
			}
			else if (arr[mid]<target)
			{
				low = mid + 1;
			}
		}
		return ind;
	}
	
	
	public static void main(String[] args) 
	{
		int[] arr = {2,5,5,5,5,6,6,8,9,9,9};
		int n = arr.length;
		
		int target = 5;
		
		int first =firstOccur(arr, n-1, target);
		int last =lastOccur(arr, n-1, target);
		
		int res = last-first+1;
		
		System.out.println(res);
	}
}

Ans 03 :-
package SearchingInArray;

public class lastOccurrence {

	public static void main(String[] args) 
	{
		int[] arr = {1,2,4,4,8,10,12,12,12,19};
		int n = arr.length;
		int target = 4;
		int count = -1;
		
//		Binary Search Method
		int low = 0;
		int high = n-1;
		
		while(low<=high)
		{
			int mid = low + (high-low)/2;
			
			if(arr[mid]==target)
			{
				count = mid;
				low = mid+1;
			}
			
			else if(target>arr[mid])
			{
				low = mid+1;
			}
			
			else 
			{
				high = mid-1;
			}
		}
		
		if(count != -1)
		{
			System.out.println(count);
		}
		else
		{
			System.out.println("Not Available in array");
		}
		
		
		
//		Linear Search Method
		
//		for(int i=0; i<n; i++)
//		{
//			if(arr[i]==target)
//			{
//				count = i;;
//			}
//		}
//		
//		if(count != -1)
//		{
//			System.out.println(count);
//		}
//		
//		else
//			System.out.println(count);
	}

}

Ans :- 4
package SearchingInArray;

public class perfectSquear {

	public static void main(String[] args) 
	{
		int num = 16;
		
		int low = 0;
		int high = num;
		
		boolean result = false;
		
		while(low<=high)
		{
			int mid = low + (high-low)/2;
			int sqr = mid*mid;
			
			if(sqr == num)
			{
				result = true;
				break;
			}
			else if(sqr > num)
			{
				high = mid-1;
			}
			else if(sqr < num)
			{
				low = mid+1;
			}
		}
		
		
		
		System.out.println(result);
	}

}

Ans :- 05
package SearchingInArray;

import java.util.Scanner;

public class SearchElemWithLinearSearch {

	public static void main(String[] args) 
	{
		Scanner scan = new Scanner(System.in);
		System.out.println("Size of array : ");
		int n = scan.nextInt();
		
		int[] array = new int[n];
		
		System.out.println("Enter Array elements : ");
		for(int i=0; i<n; i++)
		{
			array[i] = scan.nextInt();
		}
		
		System.out.println("Enter the searching element : ");
		int x = scan.nextInt();
		int index = -1;
		
		for(int i=0; i<n; i++)
		{
			if(array[i]==x)
			{
				index = i;
				break;
			}
		}
		
		if(index != -1)
		{
			System.out.println("Index of element is : " + index);
		}
		else
			System.out.println("Element Dosen't exists in Array !!!");
		
		
		scan.close();
	}

}
